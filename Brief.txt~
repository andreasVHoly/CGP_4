Marching Cubes and Free-Form Deformation

Given the attached code framework (CGP3Prep.zip) complete method stubs in C++ for the following:

- Marching Cubes (mesh.h, mesh.cpp, voxels.h, voxels.cpp): Your task here is to implement marching cubes using the code provided at  http://paulbourke.net/geometry/polygonise/marchingsource.cpp. The data structures from this code have already been imported into the framework. What remains is to apply them appropriately.

- Laplacian smoothing (mesh.h, mesh.cpp): Marching cubes can result in visible artefacts, particularly if the voxel resolution is not sufficiently high. One way to improve this is to apply a smoothing post-process. You should implement a simple iterative Laplacian smoothing operator in the method indicated.

- Free-Form Deformation (ffd.h, ffd.cpp): setting initial control point positions and applying free-form deformation given an FFD lattice. FFD is applied to the final shape generated by Constructive Solid Geometry, i.e. to the root node of the  csg tree after marching cubes and laplacian smoothing.

- Appropriate unit tests (using cpp unit) to test this new code.

Note: A framework with a GUI (in Qt) and Rendering (in OpenGL) has been provided. Your task is to fill out the methods marked as "To Do" in Doxygen. All code must be your own, except for the Marching Cubes implementation where you may make extensive use of Corey Bloyd's code. A portion of the grade will be allocated to Unit Tests, but, unlike previous assignments, there will be no explicit marks set aside for space and computation efficiency.

Grade: 15% of final mark.

Note: the framework will be made available on Monday 7 March.
